generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id               Int          @id @default(autoincrement())
  name             String       @unique
  bio              String?
  websiteUrl       String?
  twitterHandle    String?
  instagramHandle  String?
  avatarUrl        String?
  description      String?
  username         String?
  createdAt        DateTime     @default(now())
  displayName      String?
  ensName          String?
  isVerified       Boolean      @default(false)
  profileData      Json?
  profileUrl       String?
  resolutionSource String?
  resolvedAt       DateTime?
  socialLinks      Json?
  walletAddresses  Json?
  updatedAt        DateTime
  Artwork          Artwork[]    @relation("ArtistArtworks")
  Collection       Collection[] @relation("ArtistCollections")

  @@index([isVerified])
  @@index([createdAt])
  @@index([updatedAt])
}

model Artwork {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  collectionId    Int?
  attributes      Json?
  mintDate        DateTime?
  blockchain      String?
  tokenStandard   String?
  mime            String?
  metadataUrl     String?
  animationUrl    String?
  generatorUrl    String?
  contractAddress String?
  dimensions      Json?
  features        Json?
  imageUrl        String?
  supply          Int?
  thumbnailUrl    String?
  tokenId         String?
  uid             String?       @unique
  fullscreen      Boolean       @default(false)
  Collection      Collection?   @relation(fields: [collectionId], references: [id])
  ArtworkIndex    ArtworkIndex?
  Artist          Artist[]      @relation("ArtistArtworks")

  @@unique([contractAddress, tokenId])
  @@index([blockchain])
  @@index([collectionId])
  @@index([contractAddress])
  @@index([mintDate])
  @@index([title])
  @@index([tokenId])
}

model ArtworkIndex {
  id              Int      @id @default(autoincrement())
  artworkId       Int?     @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  nftUid          String   @unique
  type            String   @default("owned")
  blockchain      String
  contractAddress String
  tokenId         String
  dataSource      String
  importStatus    String   @default("pending")
  rawResponse     Json     @default("{}")
  normalizedData  Json     @default("{}")
  errorMessage    String?
  lastAttempt     DateTime @default(now())
  Artwork         Artwork? @relation(fields: [artworkId], references: [id])

  @@unique([contractAddress, tokenId])
  @@index([blockchain])
  @@index([dataSource])
  @@index([importStatus])
  @@index([type])
  @@index([lastAttempt])
  @@index([updatedAt])
}

model Collection {
  id                   Int       @id @default(autoincrement())
  slug                 String    @unique
  title                String
  description          String?
  curatorNotes         String?
  enabled              Boolean
  bannerImageUrl       String?
  chainIdentifier      String?
  contractAddresses    Json?
  discordUrl           String?
  fees                 Json?
  imageUrl             String?
  lastSyncedAt         DateTime?
  mediumUrl            String?
  projectUrl           String?
  safelistStatus       String?
  telegramUrl          String?
  websiteUrl           String?
  artBlocksProjectId   Int?
  collectionCreator    String?
  curatorAddress       String?
  currentSupply        Int?
  externalCollectionId String?
  floorPrice           Float?
  fxhashProjectId      Int?
  isGenerativeArt      Boolean   @default(false)
  isSharedContract     Boolean   @default(false)
  mintEndDate          DateTime?
  mintStartDate        DateTime?
  parentContract       String?
  projectNumber        Int?
  totalSupply          Int?
  volumeTraded         Float?
  Artwork              Artwork[]
  Artist               Artist[]  @relation("ArtistCollections")

  @@index([curatorAddress])
  @@index([isGenerativeArt])
  @@index([parentContract])
  @@index([projectNumber])
  @@index([enabled])
  @@index([title])
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  User      User     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
  @@index([userId])
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model User {
  id            String       @id
  username      String       @unique
  passwordHash  String
  userAuthToken String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  email         String       @unique
  Session       Session[]
  UserWallet    UserWallet[]

  @@index([email])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String?
  wallets   Json
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([enabled])
  @@index([userId])
}
