generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  bio               String?
  websiteUrl        String?
  twitterHandle     String?
  instagramHandle   String?
  avatarUrl         String?
  addresses         ArtistAddress[]     // Relation to blockchain addresses
  ArtistArtworks    ArtistArtworks[]
  ArtistCollections ArtistCollections[]
  collections       Collection[]        @relation("ArtistToCollection")
}

model ArtistAddress {
  id          Int      @id @default(autoincrement())
  address     String   // The blockchain address
  blockchain  String   // e.g. "ethereum", "polygon", etc.
  artistId    Int      
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([address, blockchain])
  @@index([artistId])
}

model Collection {
  id                Int                 @id @default(autoincrement())
  slug              String              @unique
  title             String
  description       String?
  curatorNotes      String?
  enabled           Boolean
  
  // OpenSea specific fields
  chainIdentifier   String?             // e.g. "ethereum", "matic", etc.
  contractAddresses Json?               // Array of contract addresses and their chains
  fees              Json?               // Collection fees/royalties data
  safelistStatus    String?             // OpenSea verification status
  websiteUrl        String?
  discordUrl        String?
  telegramUrl       String?
  mediumUrl         String?
  projectUrl        String?             // External URL for collection website
  imageUrl          String?             // Collection image/avatar
  bannerImageUrl    String?             // Collection banner image
  lastSyncedAt      DateTime?           // Last time synced with OpenSea
  
  ArtistCollections ArtistCollections[]
  artworks          Artwork[]
  artists           Artist[]            @relation("ArtistToCollection")
}

model Artwork {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  dimensions     Json?
  collectionId   Int?
  enabled        Boolean
  attributes     Json?
  tags           Json?
  contractAddr   String?
  contractAlias  String?
  mintDate       DateTime?
  tokenID        String?
  blockchain     String?
  curatorNotes   String?
  totalSupply    Int?
  tokenStandard  String?
  animation_url  String?
  image_url      String?
  mime           String?
  symbol         String?
  ArtistArtworks ArtistArtworks[]
  collection     Collection?      @relation(fields: [collectionId], references: [id])

  @@unique([tokenID, contractAddr], name: "tokenID_contractAddr")
}

model ArtistCollections {
  artistId     Int
  collectionId Int
  artist       Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([artistId, collectionId])
}

model ArtistArtworks {
  artistId  Int
  artworkId Int
  artist    Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@id([artistId, artworkId])
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  passwordHash  String
  userAuthToken String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  sessions      Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
