generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  bio              String?
  websiteUrl       String?
  twitterHandle    String?
  instagramHandle  String?
  avatarUrl        String?
  description      String?
  username         String?
  createdAt        DateTime        @default(now())
  displayName      String?
  ensName          String?
  isVerified       Boolean         @default(false)
  profileData      Json?
  profileUrl       String?
  resolutionSource String?
  resolvedAt       DateTime?
  socialLinks      Json?
  walletAddresses  Json?           // JSON array of wallet objects: [{ address: string, blockchain: string, lastIndexed?: DateTime }]
  updatedAt        DateTime        @updatedAt
  collections      Collection[]    @relation("ArtistCollections")
  artworks         Artwork[]       @relation("ArtistArtworks")
}

model Collection {
  id                         Int                 @id @default(autoincrement())
  slug                       String              @unique
  title                      String
  description                String?
  curatorNotes               String?
  enabled                    Boolean
  bannerImageUrl             String?
  chainIdentifier            String?
  contractAddresses          Json?
  discordUrl                 String?
  fees                       Json?
  imageUrl                   String?
  lastSyncedAt               DateTime?
  mediumUrl                  String?
  projectUrl                 String?
  safelistStatus             String?
  telegramUrl                String?
  websiteUrl                 String?
  artBlocksProjectId         Int?
  collectionCreator          String?
  curatorAddress             String?
  currentSupply              Int?
  externalCollectionId       String?
  floorPrice                 Float?
  fxhashProjectId            Int?
  isGenerativeArt            Boolean             @default(false)
  isSharedContract           Boolean             @default(false)
  mintEndDate                DateTime?
  mintStartDate              DateTime?
  parentContract             String?
  projectNumber              Int?
  totalSupply                Int?
  volumeTraded               Float?
  artworks                   Artwork[]
  artists                    Artist[]            @relation("ArtistCollections")

  @@index([parentContract])
  @@index([isGenerativeArt])
  @@index([projectNumber])
  @@index([curatorAddress])
}

model Artwork {
  id              Int             @id @default(autoincrement())
  title           String
  description     String?
  collectionId    Int?
  attributes      Json?
  mintDate        DateTime?
  blockchain      String?
  tokenStandard   String?
  mime            String?
  metadataUrl     String?
  animationUrl    String?
  generatorUrl    String?         // Generator URI for generative artworks
  contractAddress String?
  dimensions      Json?
  features        Json?
  imageUrl        String?
  supply          Int?
  thumbnailUrl    String?
  tokenId         String?
  uid             String?         @unique
  collection      Collection?     @relation(fields: [collectionId], references: [id])
  indexData       ArtworkIndex?
  artists         Artist[]        @relation("ArtistArtworks")

  @@unique([contractAddress, tokenId])
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  passwordHash  String
  userAuthToken String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String       @unique
  sessions      Session[]
  userWallets   UserWallet[]
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model ArtworkIndex {
  id              Int      @id @default(autoincrement())
  artworkId       Int?     @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  nftUid          String   @unique
  type            String   @default("owned")
  blockchain      String
  contractAddress String
  tokenId         String
  dataSource      String
  importStatus    String   @default("pending")
  rawResponse     Json     @default("{}")
  normalizedData  Json     @default("{}")
  errorMessage    String?
  lastAttempt     DateTime @default(now())
  artwork         Artwork? @relation(fields: [artworkId], references: [id], onDelete: SetNull)

  @@unique([contractAddress, tokenId])
  @@index([blockchain])
  @@index([dataSource])
  @@index([importStatus])
  @@index([type])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String?  // Optional name for the wallet set
  wallets   Json     // JSON array of wallet objects: [{ address: string, blockchain: string }]
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([enabled])
}
