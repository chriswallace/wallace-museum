// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  bio               String?
  websiteUrl        String?
  avatarUrl         String?
  twitterHandle     String?
  instagramHandle   String?
  collections       Collection[] // Many-to-many relation via ArtistCollections
  ArtistCollections ArtistCollections[]
  ArtistArtworks    ArtistArtworks[]
}

model Collection {
  id                Int                 @id @default(autoincrement())
  slug              String              @unique
  title             String
  enabled           Boolean
  description       String?
  curatorNotes      String?
  artists           Artist[] // Many-to-many relation
  artworks          Artwork[] // One-to-many relation
  ArtistCollections ArtistCollections[]
}

model Artwork {
  id             Int              @id @default(autoincrement())
  enabled        Boolean
  title          String
  description    String?
  image_url      String?
  animation_url  String?
  dimensions     Json?
  attributes     Json?
  curatorNotes   String?
  blockchain     String?
  mime           String?
  contractAddr   String?
  contractAlias  String?
  totalSupply    Int?
  symbol         String?
  tokenStandard  String?
  tokenID        String?
  mintDate       DateTime?
  tags           Json?
  collectionId   Int?
  collection     Collection?       @relation(fields: [collectionId], references: [id])
  ArtistArtworks ArtistArtworks[]

  @@unique([tokenID, contractAddr], name: "tokenID_contractAddr")
}

model ArtistCollections {
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([artistId, collectionId])
}

model ArtistArtworks {
  artistId Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  artworkId Int
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@id([artistId, artworkId])
}

model User {
  id            String @id @default(uuid())
  username      String @unique
  email         String @unique
  passwordHash  String
  userAuthToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions       Session[]

}

model Session {
  id             Int       @id @default(autoincrement())
  sessionId      String    @unique
  userId         String
  createdAt      DateTime  @default(now())
  expiresAt      DateTime
  user           User @relation(fields: [userId], references: [id])

  @@index([userId])
}